// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dataset

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson60bff0deDecodeSkillsTestSba(in *jlexer.Lexer, out *Publisher) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "@type":
			out.Type = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson60bff0deEncodeSkillsTestSba(out *jwriter.Writer, in Publisher) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"@type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Publisher) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson60bff0deEncodeSkillsTestSba(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Publisher) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson60bff0deEncodeSkillsTestSba(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Publisher) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson60bff0deDecodeSkillsTestSba(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Publisher) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson60bff0deDecodeSkillsTestSba(l, v)
}
func easyjson60bff0deDecodeSkillsTestSba1(in *jlexer.Lexer, out *JsonResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "conformsTo":
			out.ConformsTo = string(in.String())
		case "describedBy":
			out.DescribedBy = string(in.String())
		case "@context":
			out.Context = string(in.String())
		case "@type":
			out.Type = string(in.String())
		case "dataset":
			if in.IsNull() {
				in.Skip()
				out.Dataset = nil
			} else {
				in.Delim('[')
				if out.Dataset == nil {
					if !in.IsDelim(']') {
						out.Dataset = make([]struct {
							Type        string `json:"@type"`
							Title       string `json:"title"`
							Description string `json:"description"`
							Modified    string `json:"modified"`
							AccessLevel string `json:"accessLevel"`
							Identifier  string `json:"identifier"`
							LandingPage string `json:"landingPage,omitempty"`
							License     string `json:"license"`
							Publisher   struct {
								Type string `json:"@type"`
								Name string `json:"name"`
							} `json:"publisher"`
							ContactPoint struct {
								Type     string `json:"@type"`
								Fn       string `json:"fn"`
								HasEmail string `json:"hasEmail"`
							} `json:"contactPoint"`
							Distribution []struct {
								Type        string `json:"@type"`
								AccessURL   string `json:"accessURL,omitempty"`
								Title       string `json:"title"`
								MediaType   string `json:"mediaType,omitempty"`
								DownloadURL string `json:"downloadURL,omitempty"`
							} `json:"distribution,omitempty"`
							Keyword            []string `json:"keyword"`
							BureauCode         []string `json:"bureauCode"`
							ProgramCode        []string `json:"programCode"`
							Rights             string   `json:"rights,omitempty"`
							DescribedBy        string   `json:"describedBy,omitempty"`
							Theme              []string `json:"theme,omitempty"`
							AccrualPeriodicity string   `json:"accrualPeriodicity,omitempty"`
							DataQuality        bool     `json:"dataQuality,omitempty"`
							Issued             string   `json:"issued,omitempty"`
							IsPartOf           string   `json:"isPartOf,omitempty"`
							Language           []string `json:"language,omitempty"`
						}, 0, 1)
					} else {
						out.Dataset = []struct {
							Type        string `json:"@type"`
							Title       string `json:"title"`
							Description string `json:"description"`
							Modified    string `json:"modified"`
							AccessLevel string `json:"accessLevel"`
							Identifier  string `json:"identifier"`
							LandingPage string `json:"landingPage,omitempty"`
							License     string `json:"license"`
							Publisher   struct {
								Type string `json:"@type"`
								Name string `json:"name"`
							} `json:"publisher"`
							ContactPoint struct {
								Type     string `json:"@type"`
								Fn       string `json:"fn"`
								HasEmail string `json:"hasEmail"`
							} `json:"contactPoint"`
							Distribution []struct {
								Type        string `json:"@type"`
								AccessURL   string `json:"accessURL,omitempty"`
								Title       string `json:"title"`
								MediaType   string `json:"mediaType,omitempty"`
								DownloadURL string `json:"downloadURL,omitempty"`
							} `json:"distribution,omitempty"`
							Keyword            []string `json:"keyword"`
							BureauCode         []string `json:"bureauCode"`
							ProgramCode        []string `json:"programCode"`
							Rights             string   `json:"rights,omitempty"`
							DescribedBy        string   `json:"describedBy,omitempty"`
							Theme              []string `json:"theme,omitempty"`
							AccrualPeriodicity string   `json:"accrualPeriodicity,omitempty"`
							DataQuality        bool     `json:"dataQuality,omitempty"`
							Issued             string   `json:"issued,omitempty"`
							IsPartOf           string   `json:"isPartOf,omitempty"`
							Language           []string `json:"language,omitempty"`
						}{}
					}
				} else {
					out.Dataset = (out.Dataset)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						Type        string `json:"@type"`
						Title       string `json:"title"`
						Description string `json:"description"`
						Modified    string `json:"modified"`
						AccessLevel string `json:"accessLevel"`
						Identifier  string `json:"identifier"`
						LandingPage string `json:"landingPage,omitempty"`
						License     string `json:"license"`
						Publisher   struct {
							Type string `json:"@type"`
							Name string `json:"name"`
						} `json:"publisher"`
						ContactPoint struct {
							Type     string `json:"@type"`
							Fn       string `json:"fn"`
							HasEmail string `json:"hasEmail"`
						} `json:"contactPoint"`
						Distribution []struct {
							Type        string `json:"@type"`
							AccessURL   string `json:"accessURL,omitempty"`
							Title       string `json:"title"`
							MediaType   string `json:"mediaType,omitempty"`
							DownloadURL string `json:"downloadURL,omitempty"`
						} `json:"distribution,omitempty"`
						Keyword            []string `json:"keyword"`
						BureauCode         []string `json:"bureauCode"`
						ProgramCode        []string `json:"programCode"`
						Rights             string   `json:"rights,omitempty"`
						DescribedBy        string   `json:"describedBy,omitempty"`
						Theme              []string `json:"theme,omitempty"`
						AccrualPeriodicity string   `json:"accrualPeriodicity,omitempty"`
						DataQuality        bool     `json:"dataQuality,omitempty"`
						Issued             string   `json:"issued,omitempty"`
						IsPartOf           string   `json:"isPartOf,omitempty"`
						Language           []string `json:"language,omitempty"`
					}
					easyjson60bff0deDecode(in, &v1)
					out.Dataset = append(out.Dataset, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson60bff0deEncodeSkillsTestSba1(out *jwriter.Writer, in JsonResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"conformsTo\":"
		out.RawString(prefix[1:])
		out.String(string(in.ConformsTo))
	}
	{
		const prefix string = ",\"describedBy\":"
		out.RawString(prefix)
		out.String(string(in.DescribedBy))
	}
	{
		const prefix string = ",\"@context\":"
		out.RawString(prefix)
		out.String(string(in.Context))
	}
	{
		const prefix string = ",\"@type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"dataset\":"
		out.RawString(prefix)
		if in.Dataset == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Dataset {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson60bff0deEncode(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v JsonResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson60bff0deEncodeSkillsTestSba1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JsonResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson60bff0deEncodeSkillsTestSba1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JsonResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson60bff0deDecodeSkillsTestSba1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JsonResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson60bff0deDecodeSkillsTestSba1(l, v)
}
func easyjson60bff0deDecode(in *jlexer.Lexer, out *struct {
	Type        string `json:"@type"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Modified    string `json:"modified"`
	AccessLevel string `json:"accessLevel"`
	Identifier  string `json:"identifier"`
	LandingPage string `json:"landingPage,omitempty"`
	License     string `json:"license"`
	Publisher   struct {
		Type string `json:"@type"`
		Name string `json:"name"`
	} `json:"publisher"`
	ContactPoint struct {
		Type     string `json:"@type"`
		Fn       string `json:"fn"`
		HasEmail string `json:"hasEmail"`
	} `json:"contactPoint"`
	Distribution []struct {
		Type        string `json:"@type"`
		AccessURL   string `json:"accessURL,omitempty"`
		Title       string `json:"title"`
		MediaType   string `json:"mediaType,omitempty"`
		DownloadURL string `json:"downloadURL,omitempty"`
	} `json:"distribution,omitempty"`
	Keyword            []string `json:"keyword"`
	BureauCode         []string `json:"bureauCode"`
	ProgramCode        []string `json:"programCode"`
	Rights             string   `json:"rights,omitempty"`
	DescribedBy        string   `json:"describedBy,omitempty"`
	Theme              []string `json:"theme,omitempty"`
	AccrualPeriodicity string   `json:"accrualPeriodicity,omitempty"`
	DataQuality        bool     `json:"dataQuality,omitempty"`
	Issued             string   `json:"issued,omitempty"`
	IsPartOf           string   `json:"isPartOf,omitempty"`
	Language           []string `json:"language,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "@type":
			out.Type = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "modified":
			out.Modified = string(in.String())
		case "accessLevel":
			out.AccessLevel = string(in.String())
		case "identifier":
			out.Identifier = string(in.String())
		case "landingPage":
			out.LandingPage = string(in.String())
		case "license":
			out.License = string(in.String())
		case "publisher":
			easyjson60bff0deDecode1(in, &out.Publisher)
		case "contactPoint":
			easyjson60bff0deDecode2(in, &out.ContactPoint)
		case "distribution":
			if in.IsNull() {
				in.Skip()
				out.Distribution = nil
			} else {
				in.Delim('[')
				if out.Distribution == nil {
					if !in.IsDelim(']') {
						out.Distribution = make([]struct {
							Type        string `json:"@type"`
							AccessURL   string `json:"accessURL,omitempty"`
							Title       string `json:"title"`
							MediaType   string `json:"mediaType,omitempty"`
							DownloadURL string `json:"downloadURL,omitempty"`
						}, 0, 1)
					} else {
						out.Distribution = []struct {
							Type        string `json:"@type"`
							AccessURL   string `json:"accessURL,omitempty"`
							Title       string `json:"title"`
							MediaType   string `json:"mediaType,omitempty"`
							DownloadURL string `json:"downloadURL,omitempty"`
						}{}
					}
				} else {
					out.Distribution = (out.Distribution)[:0]
				}
				for !in.IsDelim(']') {
					var v4 struct {
						Type        string `json:"@type"`
						AccessURL   string `json:"accessURL,omitempty"`
						Title       string `json:"title"`
						MediaType   string `json:"mediaType,omitempty"`
						DownloadURL string `json:"downloadURL,omitempty"`
					}
					easyjson60bff0deDecode3(in, &v4)
					out.Distribution = append(out.Distribution, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "keyword":
			if in.IsNull() {
				in.Skip()
				out.Keyword = nil
			} else {
				in.Delim('[')
				if out.Keyword == nil {
					if !in.IsDelim(']') {
						out.Keyword = make([]string, 0, 4)
					} else {
						out.Keyword = []string{}
					}
				} else {
					out.Keyword = (out.Keyword)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.Keyword = append(out.Keyword, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bureauCode":
			if in.IsNull() {
				in.Skip()
				out.BureauCode = nil
			} else {
				in.Delim('[')
				if out.BureauCode == nil {
					if !in.IsDelim(']') {
						out.BureauCode = make([]string, 0, 4)
					} else {
						out.BureauCode = []string{}
					}
				} else {
					out.BureauCode = (out.BureauCode)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.BureauCode = append(out.BureauCode, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "programCode":
			if in.IsNull() {
				in.Skip()
				out.ProgramCode = nil
			} else {
				in.Delim('[')
				if out.ProgramCode == nil {
					if !in.IsDelim(']') {
						out.ProgramCode = make([]string, 0, 4)
					} else {
						out.ProgramCode = []string{}
					}
				} else {
					out.ProgramCode = (out.ProgramCode)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.ProgramCode = append(out.ProgramCode, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "rights":
			out.Rights = string(in.String())
		case "describedBy":
			out.DescribedBy = string(in.String())
		case "theme":
			if in.IsNull() {
				in.Skip()
				out.Theme = nil
			} else {
				in.Delim('[')
				if out.Theme == nil {
					if !in.IsDelim(']') {
						out.Theme = make([]string, 0, 4)
					} else {
						out.Theme = []string{}
					}
				} else {
					out.Theme = (out.Theme)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.Theme = append(out.Theme, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "accrualPeriodicity":
			out.AccrualPeriodicity = string(in.String())
		case "dataQuality":
			out.DataQuality = bool(in.Bool())
		case "issued":
			out.Issued = string(in.String())
		case "isPartOf":
			out.IsPartOf = string(in.String())
		case "language":
			if in.IsNull() {
				in.Skip()
				out.Language = nil
			} else {
				in.Delim('[')
				if out.Language == nil {
					if !in.IsDelim(']') {
						out.Language = make([]string, 0, 4)
					} else {
						out.Language = []string{}
					}
				} else {
					out.Language = (out.Language)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.Language = append(out.Language, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson60bff0deEncode(out *jwriter.Writer, in struct {
	Type        string `json:"@type"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Modified    string `json:"modified"`
	AccessLevel string `json:"accessLevel"`
	Identifier  string `json:"identifier"`
	LandingPage string `json:"landingPage,omitempty"`
	License     string `json:"license"`
	Publisher   struct {
		Type string `json:"@type"`
		Name string `json:"name"`
	} `json:"publisher"`
	ContactPoint struct {
		Type     string `json:"@type"`
		Fn       string `json:"fn"`
		HasEmail string `json:"hasEmail"`
	} `json:"contactPoint"`
	Distribution []struct {
		Type        string `json:"@type"`
		AccessURL   string `json:"accessURL,omitempty"`
		Title       string `json:"title"`
		MediaType   string `json:"mediaType,omitempty"`
		DownloadURL string `json:"downloadURL,omitempty"`
	} `json:"distribution,omitempty"`
	Keyword            []string `json:"keyword"`
	BureauCode         []string `json:"bureauCode"`
	ProgramCode        []string `json:"programCode"`
	Rights             string   `json:"rights,omitempty"`
	DescribedBy        string   `json:"describedBy,omitempty"`
	Theme              []string `json:"theme,omitempty"`
	AccrualPeriodicity string   `json:"accrualPeriodicity,omitempty"`
	DataQuality        bool     `json:"dataQuality,omitempty"`
	Issued             string   `json:"issued,omitempty"`
	IsPartOf           string   `json:"isPartOf,omitempty"`
	Language           []string `json:"language,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"@type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"modified\":"
		out.RawString(prefix)
		out.String(string(in.Modified))
	}
	{
		const prefix string = ",\"accessLevel\":"
		out.RawString(prefix)
		out.String(string(in.AccessLevel))
	}
	{
		const prefix string = ",\"identifier\":"
		out.RawString(prefix)
		out.String(string(in.Identifier))
	}
	if in.LandingPage != "" {
		const prefix string = ",\"landingPage\":"
		out.RawString(prefix)
		out.String(string(in.LandingPage))
	}
	{
		const prefix string = ",\"license\":"
		out.RawString(prefix)
		out.String(string(in.License))
	}
	{
		const prefix string = ",\"publisher\":"
		out.RawString(prefix)
		easyjson60bff0deEncode1(out, in.Publisher)
	}
	{
		const prefix string = ",\"contactPoint\":"
		out.RawString(prefix)
		easyjson60bff0deEncode2(out, in.ContactPoint)
	}
	if len(in.Distribution) != 0 {
		const prefix string = ",\"distribution\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v10, v11 := range in.Distribution {
				if v10 > 0 {
					out.RawByte(',')
				}
				easyjson60bff0deEncode3(out, v11)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"keyword\":"
		out.RawString(prefix)
		if in.Keyword == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Keyword {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"bureauCode\":"
		out.RawString(prefix)
		if in.BureauCode == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.BureauCode {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"programCode\":"
		out.RawString(prefix)
		if in.ProgramCode == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.ProgramCode {
				if v16 > 0 {
					out.RawByte(',')
				}
				out.String(string(v17))
			}
			out.RawByte(']')
		}
	}
	if in.Rights != "" {
		const prefix string = ",\"rights\":"
		out.RawString(prefix)
		out.String(string(in.Rights))
	}
	if in.DescribedBy != "" {
		const prefix string = ",\"describedBy\":"
		out.RawString(prefix)
		out.String(string(in.DescribedBy))
	}
	if len(in.Theme) != 0 {
		const prefix string = ",\"theme\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v18, v19 := range in.Theme {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.String(string(v19))
			}
			out.RawByte(']')
		}
	}
	if in.AccrualPeriodicity != "" {
		const prefix string = ",\"accrualPeriodicity\":"
		out.RawString(prefix)
		out.String(string(in.AccrualPeriodicity))
	}
	if in.DataQuality {
		const prefix string = ",\"dataQuality\":"
		out.RawString(prefix)
		out.Bool(bool(in.DataQuality))
	}
	if in.Issued != "" {
		const prefix string = ",\"issued\":"
		out.RawString(prefix)
		out.String(string(in.Issued))
	}
	if in.IsPartOf != "" {
		const prefix string = ",\"isPartOf\":"
		out.RawString(prefix)
		out.String(string(in.IsPartOf))
	}
	if len(in.Language) != 0 {
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v20, v21 := range in.Language {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson60bff0deDecode3(in *jlexer.Lexer, out *struct {
	Type        string `json:"@type"`
	AccessURL   string `json:"accessURL,omitempty"`
	Title       string `json:"title"`
	MediaType   string `json:"mediaType,omitempty"`
	DownloadURL string `json:"downloadURL,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "@type":
			out.Type = string(in.String())
		case "accessURL":
			out.AccessURL = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "mediaType":
			out.MediaType = string(in.String())
		case "downloadURL":
			out.DownloadURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson60bff0deEncode3(out *jwriter.Writer, in struct {
	Type        string `json:"@type"`
	AccessURL   string `json:"accessURL,omitempty"`
	Title       string `json:"title"`
	MediaType   string `json:"mediaType,omitempty"`
	DownloadURL string `json:"downloadURL,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"@type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.AccessURL != "" {
		const prefix string = ",\"accessURL\":"
		out.RawString(prefix)
		out.String(string(in.AccessURL))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	if in.MediaType != "" {
		const prefix string = ",\"mediaType\":"
		out.RawString(prefix)
		out.String(string(in.MediaType))
	}
	if in.DownloadURL != "" {
		const prefix string = ",\"downloadURL\":"
		out.RawString(prefix)
		out.String(string(in.DownloadURL))
	}
	out.RawByte('}')
}
func easyjson60bff0deDecode2(in *jlexer.Lexer, out *struct {
	Type     string `json:"@type"`
	Fn       string `json:"fn"`
	HasEmail string `json:"hasEmail"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "@type":
			out.Type = string(in.String())
		case "fn":
			out.Fn = string(in.String())
		case "hasEmail":
			out.HasEmail = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson60bff0deEncode2(out *jwriter.Writer, in struct {
	Type     string `json:"@type"`
	Fn       string `json:"fn"`
	HasEmail string `json:"hasEmail"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"@type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"fn\":"
		out.RawString(prefix)
		out.String(string(in.Fn))
	}
	{
		const prefix string = ",\"hasEmail\":"
		out.RawString(prefix)
		out.String(string(in.HasEmail))
	}
	out.RawByte('}')
}
func easyjson60bff0deDecode1(in *jlexer.Lexer, out *struct {
	Type string `json:"@type"`
	Name string `json:"name"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "@type":
			out.Type = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson60bff0deEncode1(out *jwriter.Writer, in struct {
	Type string `json:"@type"`
	Name string `json:"name"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"@type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjson60bff0deDecodeSkillsTestSba2(in *jlexer.Lexer, out *Distribution) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "@type":
			out.Type = string(in.String())
		case "accessURL":
			out.AccessURL = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "downloadURL":
			out.DownloadURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson60bff0deEncodeSkillsTestSba2(out *jwriter.Writer, in Distribution) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"@type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"accessURL\":"
		out.RawString(prefix)
		out.String(string(in.AccessURL))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"downloadURL\":"
		out.RawString(prefix)
		out.String(string(in.DownloadURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Distribution) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson60bff0deEncodeSkillsTestSba2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Distribution) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson60bff0deEncodeSkillsTestSba2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Distribution) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson60bff0deDecodeSkillsTestSba2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Distribution) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson60bff0deDecodeSkillsTestSba2(l, v)
}
func easyjson60bff0deDecodeSkillsTestSba3(in *jlexer.Lexer, out *DataSet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "@type":
			out.Type = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "modified":
			out.Modified = string(in.String())
		case "accessLevel":
			out.AccessLevel = string(in.String())
		case "identifier":
			out.Identifier = string(in.String())
		case "landingPage":
			out.LandingPage = string(in.String())
		case "license":
			out.License = string(in.String())
		case "publisher":
			(out.Publisher).UnmarshalEasyJSON(in)
		case "publisher.name":
			out.PublisherName = string(in.String())
		case "publisher.type":
			out.PublisherType = string(in.String())
		case "contactPoint":
			(out.ContactPoint).UnmarshalEasyJSON(in)
		case "contactPoint.type":
			out.ContactPointType = string(in.String())
		case "contactPoint.fn":
			out.ContactFn = string(in.String())
		case "hasEmail":
			out.ContactEmail = string(in.String())
		case "distribution":
			if in.IsNull() {
				in.Skip()
				out.Distributions = nil
			} else {
				in.Delim('[')
				if out.Distributions == nil {
					if !in.IsDelim(']') {
						out.Distributions = make([]Distribution, 0, 1)
					} else {
						out.Distributions = []Distribution{}
					}
				} else {
					out.Distributions = (out.Distributions)[:0]
				}
				for !in.IsDelim(']') {
					var v22 Distribution
					(v22).UnmarshalEasyJSON(in)
					out.Distributions = append(out.Distributions, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "distribution.@type":
			out.DistType = string(in.String())
		case "distribution.accessURL":
			out.DistAccessUrl = string(in.String())
		case "distribution.title":
			out.DistTitle = string(in.String())
		case "distribution.mediaType":
			out.DistMediaType = string(in.String())
		case "distribution.downloadURL":
			out.DistDownloadUrl = string(in.String())
		case "keyword":
			out.Keyword = string(in.String())
		case "bureauCode":
			out.BureauCode = string(in.String())
		case "programCode":
			out.ProgramCode = string(in.String())
		case "ID":
			out.ID = uint(in.Uint())
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeletedAt":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson60bff0deEncodeSkillsTestSba3(out *jwriter.Writer, in DataSet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"@type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"modified\":"
		out.RawString(prefix)
		out.String(string(in.Modified))
	}
	{
		const prefix string = ",\"accessLevel\":"
		out.RawString(prefix)
		out.String(string(in.AccessLevel))
	}
	{
		const prefix string = ",\"identifier\":"
		out.RawString(prefix)
		out.String(string(in.Identifier))
	}
	{
		const prefix string = ",\"landingPage\":"
		out.RawString(prefix)
		out.String(string(in.LandingPage))
	}
	{
		const prefix string = ",\"license\":"
		out.RawString(prefix)
		out.String(string(in.License))
	}
	{
		const prefix string = ",\"publisher\":"
		out.RawString(prefix)
		(in.Publisher).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"publisher.name\":"
		out.RawString(prefix)
		out.String(string(in.PublisherName))
	}
	{
		const prefix string = ",\"publisher.type\":"
		out.RawString(prefix)
		out.String(string(in.PublisherType))
	}
	{
		const prefix string = ",\"contactPoint\":"
		out.RawString(prefix)
		(in.ContactPoint).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"contactPoint.type\":"
		out.RawString(prefix)
		out.String(string(in.ContactPointType))
	}
	{
		const prefix string = ",\"contactPoint.fn\":"
		out.RawString(prefix)
		out.String(string(in.ContactFn))
	}
	{
		const prefix string = ",\"hasEmail\":"
		out.RawString(prefix)
		out.String(string(in.ContactEmail))
	}
	{
		const prefix string = ",\"distribution\":"
		out.RawString(prefix)
		if in.Distributions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Distributions {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"distribution.@type\":"
		out.RawString(prefix)
		out.String(string(in.DistType))
	}
	{
		const prefix string = ",\"distribution.accessURL\":"
		out.RawString(prefix)
		out.String(string(in.DistAccessUrl))
	}
	{
		const prefix string = ",\"distribution.title\":"
		out.RawString(prefix)
		out.String(string(in.DistTitle))
	}
	{
		const prefix string = ",\"distribution.mediaType\":"
		out.RawString(prefix)
		out.String(string(in.DistMediaType))
	}
	{
		const prefix string = ",\"distribution.downloadURL\":"
		out.RawString(prefix)
		out.String(string(in.DistDownloadUrl))
	}
	{
		const prefix string = ",\"keyword\":"
		out.RawString(prefix)
		out.String(string(in.Keyword))
	}
	{
		const prefix string = ",\"bureauCode\":"
		out.RawString(prefix)
		out.String(string(in.BureauCode))
	}
	{
		const prefix string = ",\"programCode\":"
		out.RawString(prefix)
		out.String(string(in.ProgramCode))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"UpdatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"DeletedAt\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataSet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson60bff0deEncodeSkillsTestSba3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataSet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson60bff0deEncodeSkillsTestSba3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataSet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson60bff0deDecodeSkillsTestSba3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataSet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson60bff0deDecodeSkillsTestSba3(l, v)
}
func easyjson60bff0deDecodeSkillsTestSba4(in *jlexer.Lexer, out *Contact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "@type":
			out.Type = string(in.String())
		case "fn":
			out.Name = string(in.String())
		case "hasEmail":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson60bff0deEncodeSkillsTestSba4(out *jwriter.Writer, in Contact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"@type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"fn\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"hasEmail\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Contact) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson60bff0deEncodeSkillsTestSba4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Contact) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson60bff0deEncodeSkillsTestSba4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Contact) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson60bff0deDecodeSkillsTestSba4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Contact) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson60bff0deDecodeSkillsTestSba4(l, v)
}
